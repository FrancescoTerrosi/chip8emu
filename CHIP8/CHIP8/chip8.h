#pragma once
#ifndef CHIP8
#define CHIP8

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

inline const void __UNUSED__(void* args...)
{
    static_cast<void*>(args);
}

class Chip8
{
public:

    Chip8();
    ~Chip8();

	void initialize();
    void emulateCycle();

    unsigned short drawFlag;
    unsigned char chip8_fontset[80] =
    {
      0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
      0x20, 0x60, 0x20, 0x20, 0x70, // 1
      0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
      0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
      0x90, 0x90, 0xF0, 0x10, 0x10, // 4
      0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
      0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
      0xF0, 0x10, 0x20, 0x40, 0x40, // 7
      0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
      0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
      0xF0, 0x90, 0xF0, 0x90, 0x90, // A
      0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
      0xF0, 0x80, 0x80, 0x80, 0xF0, // C
      0xE0, 0x90, 0x90, 0x90, 0xE0, // D
      0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
      0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

    unsigned short opcode;          // 2 byte per le operazioni macchina
    unsigned char memory[4096];		// 4k per la memoria
    unsigned char V[16];            // 16 byte per i registri della CPU
    unsigned short I;               //	Index Register
    unsigned short pc;              // Program Counter
    unsigned char gfx[64 * 32];     // Graphics
    unsigned char delay_timer;
    unsigned char sound_timer;
    unsigned short stack[16];
    unsigned short sp;

};

#endif
